name: Test the action

on:
  workflow_dispatch:
  push:
    branches:
      - '**'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Windows
          os: windows-latest

        - name: macOS
          os: macos-latest

        - name: iOS
          os: macos-latest
          target: iOS

        - name: Android32
          os: ubuntu-latest
          target: Android32

        - name: Android64
          os: ubuntu-latest
          target: Android64

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          repository: geode-catgirls/example-mod
          path: example-mod-test
          #repository: geode-sdk/texturelfr
          #path: textureldr

      # Modify files step (added by geode-catgirls)
      - name: Modify example-mod files
        shell: bash
        run: |
          # Get latest Geode version (and dont put the jq with the curl request, for some reason.)
          retry_amount=10
          GEODE_VERSION=$(curl -s https://api.github.com/repos/geode-sdk/geode/releases/latest)
          sleep 2
          GEODE_VERSION=$(echo $GEODE_VERSION | jq -r .tag_name)
          GEODE_VERSION=${GEODE_VERSION#v}

          if [ $GEODE_VERSION == null ]; then 
            for i in $(seq $retry_amount)
            do
              if [ $GEODE_VERSION == null ]; then 
                GEODE_VERSION=$(curl -s https://api.github.com/repos/geode-sdk/geode/releases/latest)
                sleep 2
                GEODE_VERSION=$(echo $GEODE_VERSION | jq -r .tag_name)
                GEODE_VERSION=${GEODE_VERSION#v}
              fi
            done
          fi
          if [ $GEODE_VERSION == null ]; then 
            echo "couldn't get le version, try again."
            exit 1;
          fi

          # Set path of mod.json file
          mod_json_path="example-mod-test/mod.json"

          # Read the current mod.json content
          mod_json=$(cat $mod_json_path)

          # Replace the placeholders
          updated_mod_json=$(echo "$mod_json" | jq \
            --arg geode_version "$GEODE_VERSION" \
            --arg mod_id "geode-catgirls.example-mod" \
            --arg mod_name "Example Mod" \
            --arg mod_version "0.0.0" \
            --arg mod_description "The Geode mod loader example!" \
            --argjson developers '["Geode Team", "Geode Catgirls Team"]' \
            'del(.developer) |
            .geode = $geode_version |
            .id = $mod_id |
            .name = $mod_name |
            .version = $mod_version |
            .description = $mod_description |
            .developers = $developers')

          # Write updated_mod_json variable contents to mod.json file
          echo $updated_mod_json > $mod_json_path

      - name: Build the mod
        uses: ./
        with:
          # sdk: nightly
          build-config: RelWithDebInfo
          #path: textureldr
          path: example-mod-test
          combine: true
          target: ${{ matrix.config.target }}

  package:
    name: Package builds
    runs-on: ubuntu-latest
    needs: ['build']

    steps:
      - uses: actions/checkout@v4

      - uses: ./combine
        id: build

      - uses: actions/upload-artifact@v4
        with:
          name: Build Output
          path: ${{ steps.build.outputs.build-output }}
